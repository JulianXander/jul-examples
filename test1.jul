# # MyDictionaryLiteralType = (
# # 	hallo: Text
# # 	welt: Integer
# # )

# # # testVar: Dictionary(MyDictionaryLiteralType) = (
# # # 	§a§ = (
# # # 		# hier sollte autoComplete hallo vorschlagen
# # # 	)
# # # )


# # test: MyDictionaryLiteralType = (
# # 	hallo = §a§
# # 	welt = 1
# # )

# # log(test)

# hi 1
MyType1 = §hallo§
# hi 2
MyType2 = Or(§bla§ §welt§)
# hi 3
MyType3 = (
	# descr 1
	prop1: §blub§
)
# 3b
MyType3b = (
	# descr 1
	prop1: §blii§
)
# hi 4
MyType4 = (
	# descr 2
	prop2: MyType3
	# descr 3
	list: List(MyType3)
)

test5: MyType4 = (
	prop2 = (
		prop1 = §blub§
	)
	list = (
		(
			prop1 = §blub§
		)
	)
)

# test6 = test5/
# test7 = test5/list/1/prop1

# test8: Or(MyType3 MyType3b) = (
# 	prop1 = §blii§
# )

# TODO test9 Type should be Or(() List(Text))
test9 = (§hallo§).filterMap(
	(value) =>
		value.regex(§bla§)/namedCaptures/blub
)