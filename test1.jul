# myDictionaryLiteralType = (
# 	hallo: Text
# 	welt: Integer
# )

# testVar: Dictionary(myDictionaryLiteralType) = (
# 	§a§ = (
# 		# hier sollte autoComplete hallo vorschlagen
# 	)
# )

# myFn = (values: List(Text)) =>
# 	t = TypeOf(values)
# 	e = t/ElementType
# 	x = values.getElement(1)

# r = myFn((§a§))

# b = List(Text)
# c = b/ElementType

myFn2 = (myVals: Dictionary(Text)) =>
	t = TypeOf(myVals)
	e = t/ElementType
	x = myVals.getField(§a§)
test2 = myFn2((x = §a§))

getField2 = nativeFunction(
	(
		dictionary: Dictionary(Any)
		key: Text
	) :> Or(() TypeOf(dictionary)/ElementType)
	true
	§TODO§
)

test3 = getField2((x = §c§) §x§)

GetElement = (values: List(Any) index: NonZeroInteger) =>
	index.greater(values.length()) ?
		true => ()
		false => TypeOf(values)/ElementType

getElement2 = nativeFunction(
	(
		values: List(Any)
		# 1 basiert
		# TODO positive
		index: NonZeroInteger
	) :> GetElement(values index)
	# index.greater(values.length()) ?
	# 	true => ()
	# 	false => TypeOf(values)/ElementType
	true
	§TODO§
)