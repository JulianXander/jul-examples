# timer1$ = timer$(1f)
# # TimerType = timer1$/ValueType
# timer1$.subscribe(
# 	(value) =>
# 		value
# )
# # TransformReturnType = transform/ReturnType
# mapped$ = timer1$.map$(
# 	(value) =>
# 		value.addFloat(4f)
# )
# timer1$.flatSwitchMap$(
# 	(value) =>
# 		x = value ?
# 			true => timer1$
# 			false => 4
# )

fn2 = (x: true) => ()
(a: Boolean) =>
	# TODO b type should be true instead of Or(a true)?
	b = a ?
		true =>
			a
		false =>
			true
	# TODO should not error
	fn2(b)

# x = completed$(4)

#
# mapTest = (
# 	source$: Stream(Any)
# 	transform$: (
# 		value: source$/ValueType
# 	): Any
# ): Stream(transform$/ReturnType)

# (x: Text) =>
# 	addFloat(x)